import OpenAI from "openai";
import { OpenAIConfig } from '../config/openai-config';

// Infrastructure HTTP Client - –∫–ª–∏–µ–Ω—Ç –¥–ª—è OpenAI API
export class OpenAIClient {
  private client: OpenAI;

  constructor() {
    this.client = new OpenAI(OpenAIConfig.getClientConfig());
  }

  async createStreamingResponse(
    instructions: string,
    input: string,
    abortSignal?: AbortSignal
  ) {
    const config = OpenAIConfig.getStreamingConfig();
    
    // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º AbortSignal –≤ OpenAI –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–º–µ–Ω—ã —Å—Ç—Ä–∏–º–∞
    return await this.client.responses.create({
      ...config,
      instructions,
      input,
      stream: true
    }, {
      signal: abortSignal // üéØ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! (–≤ options)
    });
  }

  async createChatCompletion(
    messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[],
    options?: Partial<OpenAI.Chat.Completions.ChatCompletionCreateParams>
  ) {
    return await this.client.chat.completions.create({
      model: OpenAIConfig.MODEL,
      messages,
      temperature: OpenAIConfig.TEMPERATURE,
      max_tokens: OpenAIConfig.MAX_OUTPUT_TOKENS,
      top_p: OpenAIConfig.TOP_P,
      stream: false,
      ...options
    });
  }
}