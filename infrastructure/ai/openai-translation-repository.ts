import OpenAI from 'openai';
import { Translation } from '@/domain/entities/translation';
import { Language } from '@/domain/value-objects/language';
import { Tone } from '@/domain/value-objects/tone';
import { ITranslationRepository, StreamingTranslationResult } from '@/domain/repositories/translation-repository';
import { TranslationDomainService } from '@/domain/services/translation-service';
import { OpenAIClient } from '../http/openai-client';

// Infrastructure Repository - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ OpenAI
export class OpenAITranslationRepository implements ITranslationRepository {
  constructor(
    private readonly openaiClient: OpenAIClient,
    private readonly domainService: TranslationDomainService
  ) {}

  async translateText(
    text: string,
    sourceLanguage: Language,
    targetLanguage: Language,
    tone: Tone
  ): Promise<Translation> {
    const instructions = this.domainService.buildPromptInstructions(
      sourceLanguage,
      targetLanguage,
      tone
    );

    const response = await this.openaiClient.createChatCompletion([
      { role: 'system', content: instructions },
      { role: 'user', content: text }
    ]) as OpenAI.Chat.Completions.ChatCompletion;

    const translatedText = response.choices?.[0]?.message?.content || '';
    
    return Translation.create(
      text,
      translatedText,
      sourceLanguage.code,
      targetLanguage.code,
      tone.value
    );
  }

  async* translateTextStream(
    text: string,
    sourceLanguage: Language,
    targetLanguage: Language,
    tone: Tone,
    abortSignal?: AbortSignal
  ): AsyncIterable<StreamingTranslationResult> {
    const startTime = Date.now();
    let firstTokenTime: number | null = null;
    let tokenCount = 0;
    let translatedText = '';

    try {
      // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
      if (abortSignal?.aborted) {
        return;
      }

      const instructions = this.domainService.buildPromptInstructions(
        sourceLanguage,
        targetLanguage,
        tone
      );

      // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º AbortSignal –≤ OpenAI –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–º–µ–Ω—ã —Å—Ç—Ä–∏–º–∞!
      const stream = await this.openaiClient.createStreamingResponse(instructions, text, abortSignal);

      console.log('üöÄ OpenAI stream started, abortSignal:', abortSignal?.aborted);

      for await (const event of stream) {
        // üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ chunks –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üì¶ OpenAI chunk received:', {
          type: event.type,
          aborted: abortSignal?.aborted,
          content: event.type === "response.output_text.delta" ? event.delta : null
        });

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–æ–±—ã—Ç–∏–µ–º
        if (abortSignal?.aborted) {
          console.log('üõë Breaking OpenAI stream due to abort signal');
          break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        }

        if (event.type === "response.output_text.delta") {
          // Track first token time
          if (!firstTokenTime) {
            firstTokenTime = Date.now();
            const metrics = this.domainService.calculatePerformanceMetrics(
              startTime,
              firstTokenTime,
              tokenCount
            );
            
            // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ yield
            if (abortSignal?.aborted) break;
            
            yield {
              type: 'metrics',
              metrics: {
                ttft: metrics.ttft ?? undefined
              }
            };
          }

          tokenCount++;
          translatedText += event.delta || '';

          // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ yield
          if (abortSignal?.aborted) break;

          yield {
            type: 'delta',
            content: event.delta || ''
          };

        } else if (event.type === "response.completed") {
          console.log('‚úÖ OpenAI stream completed normally');
          
          // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º yield
          if (abortSignal?.aborted) {
            console.log('üõë Stream completed but request was aborted');
            break;
          }

          const metrics = this.domainService.calculatePerformanceMetrics(
            startTime,
            firstTokenTime,
            tokenCount
          );

          // Fix null to undefined for ttft
          const fixedMetrics = {
            ...metrics,
            ttft: metrics.ttft ?? undefined
          };

          const translation = Translation.create(
            text,
            translatedText,
            sourceLanguage.code,
            targetLanguage.code,
            tone.value,
            fixedMetrics
          );

          yield {
            type: 'completed',
            translation,
            metrics: fixedMetrics
          };

        } else if (event.type === "error") {
          console.log('‚ùå OpenAI stream error event');
          yield {
            type: 'error',
            error: 'Translation failed'
          };
        }
      }
      
      console.log('üèÅ OpenAI stream loop ended');
      
    } catch (error) {
      console.log('üö® OpenAI stream error caught:', {
        name: error instanceof Error ? error.name : 'Unknown',
        message: error instanceof Error ? error.message : 'Unknown error',
        aborted: abortSignal?.aborted
      });

      // ‚úÖ –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –∫–∞–∫ –æ—à–∏–±–∫—É
      if (abortSignal?.aborted || 
          (error instanceof Error && error.name === 'AbortError')) {
        console.log('‚úÖ Graceful exit: request was cancelled');
        return; // Graceful exit on cancellation
      }

      yield {
        type: 'error',
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
}