generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // Accelerate runtime
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {

  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  role          Role      @default(USER)
  passwordHash  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]


  settings      UserSettings?
  translations  Translation[]
  subscriptions Subscription[]
  usageMonthly  UsageMonthly[]
}

model UserSettings {
  userId String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  uiLanguage           String?
  defaultSourceLang    String?
  defaultTargetLang    String?
  translationStyle     String?
  preferredLLM         String  @default("kimi-k2:free")
  reviewDailyTarget    Int?
  notificationsEnabled Boolean @default(false)
  timezone             String?
}

model Translation {

  id String @id @default(cuid())

  // Владелец: либо userId (авторизован), либо sessionId (гость)
  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String? @db.VarChar(64)

  sourceLang String
  targetLang String
  sourceText String @db.Text
  resultText String @db.Text
  tone       String
  model      String

  isLiked  Boolean @default(false)
  isPinned Boolean @default(false)

  nextReviewAt       DateTime?
  reviewIntervalDays Int?
  ease               Float?


  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId, createdAt])
  @@index([sessionId, createdAt])
  @@index([userId, nextReviewAt])
  @@index([sessionId, nextReviewAt])
  @@index([userId, isPinned, createdAt])
}


model Account {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  provider          String
  providerAccountId String
  type              String // "oauth" (резерв на будущее)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())

  @@index([userId])
}

// Подписка — необязательно сейчас, но готово к Stripe webhook'ам

model Subscription {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider         String // "stripe"
  plan             String // "free" | "pro" | ...
  status           String // "active" | "canceled" | "past_due" | ...
  currentPeriodEnd DateTime
  meta             Json?
  createdAt        DateTime @default(now())


  @@index([userId, status])
}

// Учёт квот/лимитов (символы в месяц и т.п.)
model UsageMonthly {

  id        String  @id @default(cuid())
  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String? @db.VarChar(64)
  period    String // "2025-08"
  charsUsed Int     @default(0)

  @@unique([userId, period])
  @@index([sessionId, period])
}
